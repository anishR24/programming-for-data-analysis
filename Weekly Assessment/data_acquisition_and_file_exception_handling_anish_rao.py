# -*- coding: utf-8 -*-
"""Data Acquisition_and_File_Exception_Handling_Anish_Rao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MZznfATB45Or1D0HFO1toz_Kl61gaFP3

## **Exercise 5: Data Acquisition and File Exception Handling**

---
Name - Anish Rao

Student Number - 20066423

Group - C

---

[Colab Notebook Link](https://colab.research.google.com/drive/1MZznfATB45Or1D0HFO1toz_Kl61gaFP3#scrollTo=d4kQPxohxXaR)

## Python File and Exception Handling

1. Write a Python program to open a file named "example.txt" in write mode, write
"Hello, World!" to it, and then close the file.
"""

f = open("example.txt", "w")
f.write("Hello, World!")
f.close()

"""2. Modify the program in question 1 to handle the exception if the file cannot be
opened.
"""

try:
    f = open("example.txt", "w")
    f.write("Hello, World!")
    f.close()
except IOError:
    print("Error: Could not open or write to the file.")

"""3. Write a Python program to read the contents of "example.txt" and print them to
the console. Use exception handling to catch any errors.
"""

try:
    f = open("example.txt", "r")
    print(f.read())
except Exception as e:
    print("Error:", e)
finally:
    try:
        f.close()
    except:
        pass

"""4. Write a Python program that attempts to open a non-existent file "missing.txt"
and handles the FileNotFoundError gracefully.
"""

try:
    f = open("missing.txt", "r")
    print(f.read())
except FileNotFoundError:
    print("File 'missing.txt' not found.")

"""5. Create a Python program that writes a list of numbers (1 to 10) to a file, then
reads the file and prints each number. Handle any potential exceptions.
"""

try:
    with open("numbers.txt", "w") as f:
        for i in range(1, 11):
            f.write(str(i) + "\n")
    with open("numbers.txt", "r") as f:
        for line in f:
            print(line.strip())
except Exception as e:
    print("Error:", e)

"""6. Write a Python program that opens a file, reads its content line by line using a
loop, and prints each line. Include exception handling.
"""

try:
    f = open("example.txt", "r")
    for line in f:
        print(line.strip())
except Exception as e:
    print("Error:", e)
finally:
    try:
        f.close()
    except:
        pass

"""7. Write a Python program that attempts to divide two numbers, taking user input,
and handles the ZeroDivisionError if the user enters zero as the denominator.
"""

try:
    num = float(input("Enter numerator: "))
    den = float(input("Enter denominator: "))
    print("Result:", num / den)
except ZeroDivisionError:
    print("Error: Cannot divide by zero.")

"""8. Modify question 7 to handle ValueError if the user inputs a non-numeric value
instead of a number.
"""

try:
    num = float(input("Enter numerator: "))
    den = float(input("Enter denominator: "))
    print("Result:", num / den)
except ZeroDivisionError:
    print("Error: Cannot divide by zero.")
except ValueError:
    print("Error: Please enter valid numeric values.")

"""9. Write a Python program that attempts to open a file and uses a try-except-finally
block to ensure the file is always closed properly.
"""

try:
    f = open("example.txt", "r")
    print(f.read())
except Exception as e:
    print("Error:", e)
finally:
    try:
        f.close()
    except:
        pass

"""10. Write a Python program that checks if a file exists before opening it. If the file
exists, print its contents; otherwise, print a message stating that the file does not
exist.
"""

import os
filename = "example1.txt"
if os.path.exists(filename):
    with open(filename, "r") as f:
        print("Contents of", filename, ":\n", f.read())
else:
    print("File", filename, "does not exist.")

"""## Data Acquisition

11. Write a Python program to read data from a CSV file named "data.csv" and print
its contents.
"""

import pandas as pd

try:
    df = pd.read_csv("data.csv")
    print(df.tail())
except Exception as e:
    print("Error reading data.csv:", e)

"""12. Write a Python program that reads an Excel file (data.xlsx) and prints the first five
rows using the pandas library.
"""

try:
    df = pd.read_excel("data.xlsx")
    print("First 5 rows:\n", df.head(5))
except Exception as e:
    print("Error reading data.xlsx:", e)

"""13. Write a Python script to collect stock market data from an API (e.g., Alpha
Vantage or Yahoo Finance) and display the latest stock price for a given
company.
"""

import yfinance as yf
ticker = input("Enter the stock ticker (e.g., AAPL): ")
try:
    stock = yf.Ticker(ticker)
    data = stock.history(period="1d")
    latest_price = data['Close'].iloc[-1]
    print("Latest price for", ticker, ":", latest_price)
except Exception as e:
    print("Error fetching stock data:", e)

"""14. Write a Python program to check if a given dataset file (dataset.csv) exists before
attempting to read it. If it doesn't exist, print a message informing the user.
"""

filename = "dataset.csv"
if os.path.exists(filename):
    with open(filename, "r") as f:
        print("Contents of dataset.csv:\n", f.read())
else:
    print("File 'dataset.csv' does not exist.")

"""## Web Scraping Questions

15. Write a Python script using requests and BeautifulSoup to extract the title of a
webpage (e.g., "https://dbs.ie/").

**Note** - `https://dbs.ie/` was not working properly so used `https://met.ie/`
"""

import requests
from bs4 import BeautifulSoup
url = "https://met.ie/"
try:
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "html.parser")
    print("Page Title:", soup.title.string)
except Exception as e:
    print("Error scraping title:", e)

"""16. Write a Python program that scrapes all the links (< a > tags) from the webpage in
question 16 above and prints them.

"""

try:
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "html.parser")
    links = soup.find_all("a")
    for link in links:
        print("Link:", link.get("href"))
except Exception as e:
    print("Error scraping links:", e)

"""17. Write a Python script that extracts and prints all headings (h1, h2, and h3 tags)
from the given webpage in question 16 above.
"""

try:
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "html.parser")
    for tag in ["h1", "h2", "h3"]:
        headings = soup.find_all(tag)
        for heading in headings:
            print(f"{tag}:", heading.get_text(strip=True))
except Exception as e:
    print("Error scraping headings:", e)

"""18. Write a Python script that scrapes a table from the webpage in question 16
above and stores the data in a CSV file.
"""

try:
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "html.parser")
    table = soup.find("table")
    if table:
        rows = table.find_all("tr")
        with open("table_data.csv", "w", newline="") as csvfile:
            writer = csv.writer(csvfile)
            for row in rows:
                cols = row.find_all(["th", "td"])
                cols_text = [col.get_text(strip=True) for col in cols]
                writer.writerow(cols_text)
        print("Table data has been written to table_data.csv")
    else:
        print("No table found on the webpage.")
except Exception as e:
    print("Error scraping table:", e)